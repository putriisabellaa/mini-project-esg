import type { Metadata } from "next";
import { Geist, Geist_Mono, Inter, Poppins } from "next/font/google";
import { NextIntlClientProvider } from "next-intl";
import {getMessages} from 'next-intl/server';

export function generateStaticParams() {
  return [{ locale: "en-US" }, { locale: "id-ID" }, { locale: "ch-CH" }];
}

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
  display: "swap",
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
  display: "swap",
});

const inter = Inter({
  variable: "--font-inter",
  subsets: ["latin"],
  display: "swap",
});

const poppins = Poppins({
  variable: "--font-poppins",
  subsets: ["latin"],
  weight: ["400", "700"],
  display: "swap",
});

export const metadata: Metadata = {
  title: "Mini Project ESG",
  description: "Generated by create next app",
};

export default async function RootLayout({ 
  children,
  params: { locale }, }: 
  { children: React.ReactNode; 
    params: { locale: string } 
  }) {

  // const { locale } = params;
  //let messages: Record<string, string> | null = null;
  const messages = await getMessages();

  // try {
  //   messages = (await import(`../../messages/${locale}.json`)).default;
  // } catch (error) {
  //   console.error(`Locale not found: ${locale}`, error);
  // }

  return (
    <html lang={locale}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${inter.variable} ${poppins.variable} antialiased`}
      >
        {messages ? (
          <NextIntlClientProvider locale={locale} messages={messages}>
            {children}
          </NextIntlClientProvider>
        ) : (
          <div style={{ textAlign: "center", marginTop: "20px" }}>
            <h1>404 - Locale Not Found</h1>
            <p>The requested language is not available.</p>
          </div>
        )}
      </body>
    </html>
  );
}
